# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: all_in_one.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto


@dataclass
class Data(betterproto.Message):
    """通用消息"""

    proto: int = betterproto.int32_field(1)
    bin: bytes = betterproto.bytes_field(2)


@dataclass
class NetErr(betterproto.Message):
    """错误信息"""

    err: int = betterproto.sint32_field(1)
    why: bytes = betterproto.bytes_field(2)
    vars: bytes = betterproto.bytes_field(3)
    stacktrace: str = betterproto.string_field(4)


@dataclass
class C2s(betterproto.Message):
    seq: int = betterproto.int32_field(1)
    type: int = betterproto.int32_field(2)
    data: bytes = betterproto.bytes_field(3)


@dataclass
class S2c(betterproto.Message):
    seq: int = betterproto.int32_field(1)
    type: int = betterproto.int32_field(2)
    err: "NetErr" = betterproto.message_field(3)
    data: bytes = betterproto.bytes_field(4)


@dataclass
class LoginDev(betterproto.Message):
    login: "Login" = betterproto.message_field(1)
    uid_base: int = betterproto.int64_field(2)
    random_seed: int = betterproto.int64_field(3)


@dataclass
class Login(betterproto.Message):
    """登录请求"""

    channel_id: str = betterproto.string_field(1)
    channel_uid: str = betterproto.string_field(2)
    role_id: int = betterproto.int64_field(3)
    verify_code: str = betterproto.string_field(4)
    server_id: int = betterproto.int32_field(5)
    os_type: int = betterproto.uint32_field(6)
    app_ver: str = betterproto.string_field(7)
    res_ver: str = betterproto.string_field(8)
    device: "Device" = betterproto.message_field(9)
    channel_extra: str = betterproto.string_field(10)


@dataclass
class Device(betterproto.Message):
    """设备信息"""

    device_label: str = betterproto.string_field(1)
    device_model: str = betterproto.string_field(2)
    device_os_info: str = betterproto.string_field(3)
    device_cpu: str = betterproto.string_field(4)
    device_cpu_count: str = betterproto.string_field(5)
    device_memory: str = betterproto.string_field(6)
    device_graphic: str = betterproto.string_field(7)
    device_graphic_type: str = betterproto.string_field(8)
    device_graphic_memory: str = betterproto.string_field(9)
    device_shader_level: str = betterproto.string_field(10)
    device_recommend_level: str = betterproto.string_field(11)
    device_mac: str = betterproto.string_field(12)
    device_ip: str = betterproto.string_field(13)


@dataclass
class RoleDevice(betterproto.Message):
    """玩家设备信息"""

    label: str = betterproto.string_field(1)
    model: str = betterproto.string_field(2)


@dataclass
class RdBase(betterproto.Message):
    """
    注意： 修改此处基础数据结构(rd_base,rd_device,rd_render,rd_ui,rd_net,rd_extend)时， 注意：
    需对应修改RuntimeDataNetMgr.lua中的fn.CutData方法逻辑，还涉及到C#层逻辑，慎重修改 运行时统计基础数据
    """

    game_time: str = betterproto.string_field(1)
    time: str = betterproto.string_field(2)
    client_version: str = betterproto.string_field(3)


@dataclass
class RdDevice(betterproto.Message):
    """运行时设备状态数据"""

    opt_type: int = betterproto.int32_field(1)
    battery_level: int = betterproto.int32_field(2)
    battery_status: int = betterproto.int32_field(3)
    free_state: bool = betterproto.bool_field(4)
    persist_time: int = betterproto.int32_field(5)
    device_name: str = betterproto.string_field(6)


@dataclass
class RdRender(betterproto.Message):
    """运行时渲染数据"""

    scene_name: str = betterproto.string_field(1)
    fps: int = betterproto.int32_field(2)


@dataclass
class RdUi(betterproto.Message):
    """运行时统计UI操作数据"""

    name: str = betterproto.string_field(1)
    opt_type: int = betterproto.int32_field(2)
    remain_time: int = betterproto.int32_field(3)


@dataclass
class RdNet(betterproto.Message):
    """运行时统计网络通信数据"""

    opt_type: int = betterproto.int32_field(1)
    port_name: str = betterproto.string_field(2)
    error_num: int = betterproto.int32_field(3)
    size: int = betterproto.int32_field(4)
    state: int = betterproto.int32_field(5)
    delay: int = betterproto.int32_field(6)


@dataclass
class RdExtend(betterproto.Message):
    """运行时统计扩展数据"""

    type: int = betterproto.int32_field(1)
    content: str = betterproto.string_field(2)


@dataclass
class RdDeviceData(betterproto.Message):
    """设备状态数据结构"""

    base: "RdBase" = betterproto.message_field(1)
    device_data: "RdDevice" = betterproto.message_field(2)


@dataclass
class RdNetData(betterproto.Message):
    """网络状态数据结构"""

    base: "RdBase" = betterproto.message_field(1)
    net_data: "RdNet" = betterproto.message_field(2)


@dataclass
class RdRenderData(betterproto.Message):
    """渲染数据结构"""

    base: "RdBase" = betterproto.message_field(1)
    render_data: "RdRender" = betterproto.message_field(2)


@dataclass
class RdUiData(betterproto.Message):
    """UI操作数据结构"""

    base: "RdBase" = betterproto.message_field(1)
    ui_data: "RdUi" = betterproto.message_field(2)


@dataclass
class RdExtendData(betterproto.Message):
    """扩展数据结构"""

    base: "RdBase" = betterproto.message_field(1)
    extend_data: "RdExtend" = betterproto.message_field(2)


@dataclass
class RdDataList(betterproto.Message):
    """运行时统计数据结构"""

    rd_device_list: List["RdDeviceData"] = betterproto.message_field(1)
    rd_ui_list: List["RdUiData"] = betterproto.message_field(2)
    rd_net_list: List["RdNetData"] = betterproto.message_field(3)
    rd_render_list: List["RdRenderData"] = betterproto.message_field(4)
    rd_extend_list: List["RdExtendData"] = betterproto.message_field(5)


@dataclass
class AchievementReceiveData(betterproto.Message):
    """成就全服奖励领取返回数据"""

    receive_achievements: List[int] = betterproto.uint32_field(1)
    res: "ResChange" = betterproto.message_field(2)


@dataclass
class AchievementGetRankInfo(betterproto.Message):
    """成就获取排行榜返回数据"""

    rank_infos: List["CommonSimplePlayInfo"] = betterproto.message_field(1)
    achievement_tids: List[int] = betterproto.uint32_field(2)


@dataclass
class ArenaFightInfo(betterproto.Message):
    """竞技场对战记录信息"""

    role_id: int = betterproto.int64_field(1)
    server_id: int = betterproto.uint32_field(2)
    power: int = betterproto.uint32_field(3)
    level: int = betterproto.uint32_field(4)
    fight_id: int = betterproto.uint64_field(5)
    score_change: int = betterproto.sint32_field(6)
    time: int = betterproto.uint32_field(7)
    robot_name: bytes = betterproto.bytes_field(8)
    old_score: int = betterproto.uint32_field(9)


@dataclass
class ArenaLoginInfo(betterproto.Message):
    """通信返给前台的登录信息"""

    season_start_day: int = betterproto.uint32_field(1)
    last_day: int = betterproto.uint32_field(2)
    ref_free_num: int = betterproto.uint32_field(3)
    highest_rank: int = betterproto.uint32_field(4)
    self_score: int = betterproto.uint32_field(5)


@dataclass
class ArenaMatchPlayerInfo(betterproto.Message):
    """通信返给前台的匹配对手信息"""

    arena_player_infos: List["CommonPlayInfo"] = betterproto.message_field(1)


@dataclass
class ArenaFightBackInfo(betterproto.Message):
    """通信返给前台的战斗结果信息"""

    rank: int = betterproto.uint32_field(1)
    self_score: int = betterproto.uint32_field(2)
    target_score: int = betterproto.uint32_field(3)
    highest_rank: int = betterproto.uint32_field(4)
    res: "ResChange" = betterproto.message_field(5)
    daily: "RoleDailyState" = betterproto.message_field(6)
    record_infos: List["ArenaRecordInfo"] = betterproto.message_field(7)


@dataclass
class RevArenaRecordInfos(betterproto.Message):
    """推送前台对战记录信息"""

    record_infos: List["ArenaRecordInfo"] = betterproto.message_field(1)


@dataclass
class ArenaRecordInfo(betterproto.Message):
    """竞技场对战记录信息"""

    info: "ArenaFightInfo" = betterproto.message_field(1)
    name: bytes = betterproto.bytes_field(2)
    alliance_info: bytes = betterproto.bytes_field(3)
    icon_tid: int = betterproto.int32_field(5)


@dataclass
class ProduceAddition(betterproto.Message):
    """挂机加成信息"""

    tid: int = betterproto.int64_field(1)
    start_time: int = betterproto.int64_field(2)


@dataclass
class ProduceExtra(betterproto.Message):
    """挂机附加信息"""

    global_produce_tid: int = betterproto.int64_field(1)
    produce_equip_rate: int = betterproto.int64_field(2)
    last_reap_time: int = betterproto.int64_field(3)


@dataclass
class AutoProduceToClient(betterproto.Message):
    """通信返回给前台的数据"""

    awards: List["Item"] = betterproto.message_field(1)
    produce_additions: List["ProduceAddition"] = betterproto.message_field(2)
    produce_extra: "ProduceExtra" = betterproto.message_field(3)
    res: "ResChange" = betterproto.message_field(4)
    last_gather_time: int = betterproto.uint32_field(5)
    daily: "RoleDailyState" = betterproto.message_field(6)


@dataclass
class ChatLinkParam(betterproto.Message):
    """聊天链接参数结构，用于客户端参数传递，不参与网络通信"""

    id: str = betterproto.string_field(1)
    type: int = betterproto.int32_field(2)
    data: bytes = betterproto.bytes_field(3)


@dataclass
class SimpleChatLinkParam(betterproto.Message):
    """聊天链接参数结构，参与网络通信"""

    type: int = betterproto.int32_field(1)
    data: bytes = betterproto.bytes_field(3)


@dataclass
class SingleMsgData(betterproto.Message):
    """单条聊天数据"""

    sender_role_id: int = betterproto.int64_field(1)
    time: int = betterproto.int32_field(2)
    index: int = betterproto.int32_field(3)
    content: "ChatMsgContent" = betterproto.message_field(4)


@dataclass
class ChannelMsgList(betterproto.Message):
    """频道的消息列表(用于登陆数据推送)"""

    channel_id: int = betterproto.int64_field(1)
    start_idx: int = betterproto.int32_field(2)
    end_idx: int = betterproto.int32_field(3)
    msg_list: List["SingleMsgData"] = betterproto.message_field(4)


@dataclass
class PrivateChannelMsgList(betterproto.Message):
    """私聊频道消息列表"""

    role_id: int = betterproto.int64_field(1)
    data: "ChannelMsgList" = betterproto.message_field(2)


@dataclass
class ChatMsgContent(betterproto.Message):
    """聊天消息内容"""

    text_content: str = betterproto.string_field(1)
    voice_content: bytes = betterproto.bytes_field(2)
    at_role_id: int = betterproto.int64_field(3)
    link_params: List["SimpleChatLinkParam"] = betterproto.message_field(4)


@dataclass
class ChatRoleBaseInfo(betterproto.Message):
    """聊天玩家显示基本信息"""

    role_id: int = betterproto.int64_field(1)
    head: int = betterproto.int32_field(2)
    level: int = betterproto.int32_field(3)
    vip: int = betterproto.int32_field(4)
    title: int = betterproto.int32_field(5)
    name: str = betterproto.string_field(6)


@dataclass
class ResChatLoginData(betterproto.Message):
    """聊天登陆消息"""

    world_channel_id: int = betterproto.int64_field(1)
    guild_channel_id: int = betterproto.int64_field(2)
    is_banned: bool = betterproto.bool_field(3)
    release_time: int = betterproto.int32_field(4)
    black_list: List[int] = betterproto.int32_field(5)


@dataclass
class ResChatInitData(betterproto.Message):
    """聊天初始化数据"""

    msg_data: List["ChannelMsgList"] = betterproto.message_field(6)
    private_msg_data: List["PrivateChannelMsgList"] = betterproto.message_field(7)
    role_info_list: List["ChatRoleBaseInfo"] = betterproto.message_field(8)


@dataclass
class ResReceiveChatMsg(betterproto.Message):
    """新消息推送"""

    index: int = betterproto.int32_field(1)
    channel_id: int = betterproto.int64_field(2)
    msg_data: "SingleMsgData" = betterproto.message_field(3)
    with_role_info: bool = betterproto.bool_field(4)
    sender_role_info: bytes = betterproto.bytes_field(5)


@dataclass
class EmptyMsg(betterproto.Message):
    """空消息"""

    sender_role_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    at_role_id: int = betterproto.int64_field(3)


@dataclass
class ResReceiveEmptyMsg(betterproto.Message):
    """空消息推送"""

    msg_list: List["EmptyMsg"] = betterproto.message_field(1)


@dataclass
class ResChatMsgList(betterproto.Message):
    """请求消息列表回调"""

    msg_list: "ChannelMsgList" = betterproto.message_field(1)
    role_info_list: List["ChatRoleBaseInfo"] = betterproto.message_field(2)


@dataclass
class ReqSendChatMsgToRole(betterproto.Message):
    """请求发送私聊消息"""

    target_role_id: int = betterproto.int64_field(1)
    content: "ChatMsgContent" = betterproto.message_field(2)


@dataclass
class Currency(betterproto.Message):
    """主角货币"""

    tid: int = betterproto.int64_field(1)
    state: bool = betterproto.bool_field(2)
    count: int = betterproto.int64_field(3)
    recharge_count: int = betterproto.int64_field(4)


@dataclass
class DailyDungeonInfo(betterproto.Message):
    """日常副本信息"""

    progress_list: List[int] = betterproto.uint32_field(1)
    flush_time: int = betterproto.uint32_field(2)
    attack_count_list: List[int] = betterproto.uint32_field(3)


@dataclass
class DailyDungeonAttackBack(betterproto.Message):
    """日常副本讨伐返回数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_flush_time: int = betterproto.uint32_field(2)
    new_progress: int = betterproto.uint32_field(3)
    new_count: int = betterproto.uint32_field(4)
    is_double: bool = betterproto.bool_field(5)


@dataclass
class DailyDungeonMopUpBack(betterproto.Message):
    """日常副本扫荡返回数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_flush_time: int = betterproto.uint32_field(2)
    new_count: int = betterproto.uint32_field(3)
    is_double: bool = betterproto.bool_field(4)


@dataclass
class DailyDungeonBuyCountBack(betterproto.Message):
    """日常副本购买次数返回数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_flush_time: int = betterproto.uint32_field(2)
    new_buy_count: int = betterproto.uint32_field(3)


@dataclass
class EquipInfo(betterproto.Message):
    """装备信息"""

    role_equips: List["HeroEquipInfo"] = betterproto.message_field(1)


@dataclass
class HeroEquipInfo(betterproto.Message):
    """英雄装备信息"""

    hero_uid: int = betterproto.int64_field(1)
    equip_list: List["Equipment"] = betterproto.message_field(2)


@dataclass
class EquipParam(betterproto.Message):
    """装备参数（作为装备的唯一标识）"""

    tid: int = betterproto.int64_field(1)
    star: int = betterproto.int32_field(2)
    exp: int = betterproto.int32_field(3)


@dataclass
class EquipHolderInfo(betterproto.Message):
    """装备的归属信息"""

    holder_uid: int = betterproto.int64_field(1)
    equip_param: "EquipParam" = betterproto.message_field(2)


@dataclass
class WearEquipReq(betterproto.Message):
    """请求穿/替换/脱装备"""

    hero_uid: int = betterproto.int64_field(1)
    equip_list: List["EquipHolderInfo"] = betterproto.message_field(2)


@dataclass
class WearEquipBack(betterproto.Message):
    """穿/脱装备返回前台"""

    res: "ResChange" = betterproto.message_field(1)


@dataclass
class EnhanceEquip(betterproto.Message):
    """装备强化请求参数"""

    hero_uid: int = betterproto.int64_field(1)
    equip_param: "EquipParam" = betterproto.message_field(2)
    mat_equip_list: List["Equipment"] = betterproto.message_field(3)


@dataclass
class EnhanceEquipBack(betterproto.Message):
    """装备强化返回"""

    res: "ResChange" = betterproto.message_field(1)
    new_exp: int = betterproto.int32_field(2)
    new_star: int = betterproto.int64_field(3)


@dataclass
class FighterBaseInfo(betterproto.Message):
    """战斗者基础数据"""

    id: int = betterproto.int64_field(1)
    tid: int = betterproto.int64_field(2)
    type: int = betterproto.int32_field(3)
    uid: int = betterproto.int64_field(4)
    role: int = betterproto.int64_field(5)
    team: int = betterproto.int32_field(6)
    loc: int = betterproto.int32_field(7)
    star: int = betterproto.int32_field(8)
    level: int = betterproto.int32_field(9)
    hp: int = betterproto.int64_field(10)
    max_hp: int = betterproto.int64_field(11)
    anger: int = betterproto.int64_field(12)
    max_anger: int = betterproto.int64_field(13)
    enable: bool = betterproto.bool_field(14)


@dataclass
class FighterInfo(betterproto.Message):
    """战斗者初始数据"""

    tid: int = betterproto.int64_field(1)
    type: int = betterproto.int32_field(2)
    uid: int = betterproto.int64_field(3)
    role: int = betterproto.int32_field(4)
    style: int = betterproto.int32_field(5)
    name: int = betterproto.int32_field(6)
    camp: int = betterproto.int32_field(7)
    profession: int = betterproto.int32_field(8)
    team: int = betterproto.int32_field(9)
    loc: int = betterproto.int32_field(10)
    star: int = betterproto.int32_field(11)
    level: int = betterproto.int32_field(12)
    attack: int = betterproto.int64_field(13)
    defense: int = betterproto.int64_field(14)
    hp: int = betterproto.int64_field(15)
    speed: int = betterproto.int32_field(16)
    atk_pp: float = betterproto.float_field(17)
    defense_pp: float = betterproto.float_field(18)
    hp_pp: float = betterproto.float_field(19)
    ab_deepen: float = betterproto.float_field(20)
    dodge: float = betterproto.float_field(21)
    hit: float = betterproto.float_field(22)
    wreck: float = betterproto.float_field(23)
    parry: float = betterproto.float_field(24)
    parry_reduce: float = betterproto.float_field(25)
    crit: float = betterproto.float_field(26)
    crit_resist: float = betterproto.float_field(27)
    crit_ratio: float = betterproto.float_field(28)
    crit_harm: float = betterproto.float_field(29)
    breaking: float = betterproto.float_field(30)
    ctrl_resist: float = betterproto.float_field(31)
    reduce: float = betterproto.float_field(32)
    rel_harm: float = betterproto.float_field(33)
    normal_ab: int = betterproto.int32_field(34)
    anger_ab: int = betterproto.int32_field(35)
    attr_ab: int = betterproto.int32_field(36)
    passive_ab: int = betterproto.int32_field(37)
    genius_ab: int = betterproto.int32_field(38)


@dataclass
class PoolFighterKey(betterproto.Message):
    """数据池战斗者Key"""

    role_id: int = betterproto.int64_field(1)
    uid: int = betterproto.int64_field(2)
    tid: int = betterproto.int64_field(3)
    team: int = betterproto.int32_field(4)
    loc: int = betterproto.int32_field(5)
    fight_tid: int = betterproto.int64_field(6)


@dataclass
class PoolFighter(betterproto.Message):
    """数据池战斗者"""

    key: "PoolFighterKey" = betterproto.message_field(1)
    hp: int = betterproto.int32_field(3)
    anger: int = betterproto.int32_field(5)


@dataclass
class FormationFighter(betterproto.Message):
    """布阵战斗者"""

    uid: int = betterproto.int64_field(1)
    tid: int = betterproto.int64_field(2)
    type: int = betterproto.int32_field(3)
    loc: int = betterproto.int32_field(4)


@dataclass
class Formation(betterproto.Message):
    """阵型数据"""

    fight_type: int = betterproto.int32_field(1)
    power: int = betterproto.int32_field(2)
    max_power: int = betterproto.int32_field(3)
    team: List["FormationFighter"] = betterproto.message_field(4)
    warcraft_id: int = betterproto.int64_field(5)


@dataclass
class FormationPool(betterproto.Message):
    """阵型数据池"""

    fight_type: int = betterproto.int32_field(1)
    pool: List["PoolFighter"] = betterproto.message_field(2)
    passive_ab: List[int] = betterproto.int64_field(3)
    passive_def: List[int] = betterproto.int64_field(4)


@dataclass
class FormationData(betterproto.Message):
    """阵型存储"""

    atk_formations: List["Formation"] = betterproto.message_field(1)
    def_formations: List["Formation"] = betterproto.message_field(2)
    pool: List["FormationPool"] = betterproto.message_field(3)


@dataclass
class FightMirror(betterproto.Message):
    """战斗数据镜像"""

    role_id: int = betterproto.int64_field(1)
    power: int = betterproto.int32_field(2)
    type: int = betterproto.int32_field(3)
    fighter_list: List["FighterInfo"] = betterproto.message_field(4)
    warcraft_tid: int = betterproto.int32_field(5)
    warcraft_star: int = betterproto.int32_field(6)
    warcraft_level: int = betterproto.int32_field(7)


@dataclass
class FightReport(betterproto.Message):
    """战报信息"""

    role_id: int = betterproto.int64_field(1)
    enemy_id: int = betterproto.int64_field(2)
    id: int = betterproto.int64_field(3)
    tid: int = betterproto.int64_field(4)
    type: int = betterproto.int32_field(5)
    fighter_list: List["FighterBaseInfo"] = betterproto.message_field(6)
    action_list: List[bytes] = betterproto.bytes_field(7)
    result: int = betterproto.int32_field(8)
    over_fighter_id_list: List[int] = betterproto.int32_field(9)
    over_round: int = betterproto.int32_field(10)
    time: int = betterproto.int64_field(11)


@dataclass
class FightReportId(betterproto.Message):
    """战报ID，用于聊天分享"""

    id: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)


@dataclass
class FightResultData(betterproto.Message):
    """战斗结果数据"""

    id: int = betterproto.int64_field(1)
    tid: int = betterproto.int64_field(2)
    result: int = betterproto.int32_field(3)
    finish: bool = betterproto.bool_field(4)
    atk_hp: int = betterproto.int32_field(5)
    atk_max_hp: int = betterproto.int32_field(6)
    def_hp: int = betterproto.int32_field(7)
    def_max_hp: int = betterproto.int32_field(8)
    enemy_id: int = betterproto.int64_field(9)
    pool: List["PoolFighter"] = betterproto.message_field(10)


@dataclass
class FatAbBefore(betterproto.Message):
    """/ 战斗事件定义 使用技能开始"""

    type: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    src_id: int = betterproto.int64_field(3)
    aim_list: List[int] = betterproto.int64_field(4)
    ab_tid: int = betterproto.int64_field(5)
    strike_back: bool = betterproto.bool_field(6)


@dataclass
class FatAbAfter(betterproto.Message):
    """使用技能结束"""

    type: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)


@dataclass
class BuffObj(betterproto.Message):
    """buff对象"""

    aim_id: int = betterproto.int64_field(1)
    tid: int = betterproto.int64_field(2)
    overlay: int = betterproto.int32_field(3)
    sign: bool = betterproto.bool_field(4)


@dataclass
class FatBuffChange(betterproto.Message):
    """buff变化"""

    type: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    buff_list: List["BuffObj"] = betterproto.message_field(3)


@dataclass
class FatFighterDie(betterproto.Message):
    """战斗者死亡"""

    type: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    src_id: int = betterproto.int64_field(3)
    aim_id: int = betterproto.int64_field(4)
    count: int = betterproto.int32_field(5)


@dataclass
class HarmObj(betterproto.Message):
    """伤害对象"""

    aim_id: int = betterproto.int64_field(1)
    type: int = betterproto.int32_field(2)
    value: int = betterproto.int64_field(3)
    old_hp: int = betterproto.int64_field(4)
    hp: int = betterproto.int64_field(5)
    old_shield: int = betterproto.int64_field(6)
    shield: int = betterproto.int64_field(7)
    passive: bool = betterproto.bool_field(8)


@dataclass
class FatHarm(betterproto.Message):
    """伤害"""

    type: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    src_id: int = betterproto.int64_field(3)
    index: int = betterproto.int32_field(4)
    harm_list: List["HarmObj"] = betterproto.message_field(5)


@dataclass
class FatAngerChange(betterproto.Message):
    """怒气变化"""

    type: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    aim_id: int = betterproto.int64_field(3)
    anger: int = betterproto.int32_field(4)


@dataclass
class FatRemoveFighter(betterproto.Message):
    """移除战斗者"""

    type: int = betterproto.int32_field(1)
    aim_list: List[int] = betterproto.int64_field(2)


@dataclass
class FatShield(betterproto.Message):
    """护盾变化"""

    type: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    aim_id: int = betterproto.int64_field(3)
    shield: int = betterproto.int64_field(4)


@dataclass
class FatChangeStyle(betterproto.Message):
    """形象变化"""

    type: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    aim_id: int = betterproto.int64_field(3)
    style_tid: int = betterproto.int64_field(4)


@dataclass
class FatResetStyle(betterproto.Message):
    """重置形象"""

    type: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    aim_id: int = betterproto.int64_field(3)
    style_tid: int = betterproto.int64_field(4)


@dataclass
class LocationObj(betterproto.Message):
    """位置对象"""

    aim_id: int = betterproto.int64_field(1)
    location: int = betterproto.int32_field(2)


@dataclass
class FatLocationChange(betterproto.Message):
    """位置变化"""

    type: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    list: List["LocationObj"] = betterproto.message_field(3)


@dataclass
class FatFighterEnter(betterproto.Message):
    """战斗者入场"""

    type: int = betterproto.int32_field(1)
    aim_id: int = betterproto.int64_field(2)


@dataclass
class FatFighterOut(betterproto.Message):
    """战斗者离场"""

    type: int = betterproto.int32_field(1)
    aim_id: int = betterproto.int64_field(2)


@dataclass
class FatWarcraftAnger(betterproto.Message):
    """魔兽怒气变化"""

    type: int = betterproto.int32_field(1)
    aim_id: int = betterproto.int64_field(2)
    round: int = betterproto.int32_field(3)


@dataclass
class FatRoundReady(betterproto.Message):
    """回合准备"""

    type: int = betterproto.int32_field(1)
    round: int = betterproto.int32_field(2)


@dataclass
class FatFightOver(betterproto.Message):
    """战斗结束"""

    type: int = betterproto.int32_field(1)
    result: int = betterproto.int32_field(2)


@dataclass
class FightRecord(betterproto.Message):
    """战斗记录"""

    role_id: int = betterproto.int64_field(1)
    fight_id: int = betterproto.int64_field(2)


@dataclass
class FightStart(betterproto.Message):
    """开始战斗"""

    fight_tid: int = betterproto.int64_field(1)
    formation: "Formation" = betterproto.message_field(2)
    enemy_id: int = betterproto.int64_field(3)
    ext_data: bytes = betterproto.bytes_field(4)


@dataclass
class FightStartRev(betterproto.Message):
    """开始战斗返回数据"""

    formations: List["Formation"] = betterproto.message_field(1)
    report_data: "GetFightReportRes" = betterproto.message_field(2)
    result: "FightResultData" = betterproto.message_field(3)


@dataclass
class FightExit(betterproto.Message):
    """战斗退出"""

    fight_id: int = betterproto.int64_field(1)
    fight_tid: int = betterproto.int64_field(2)
    over: bool = betterproto.bool_field(3)


@dataclass
class FormationChange(betterproto.Message):
    """战斗布阵"""

    formation: "Formation" = betterproto.message_field(1)
    type: int = betterproto.int32_field(2)


@dataclass
class FormationChangeRev(betterproto.Message):
    """布阵返回值"""

    formations: List["Formation"] = betterproto.message_field(1)
    type: int = betterproto.int32_field(2)


@dataclass
class FormationPoolChangeRev(betterproto.Message):
    """布阵返回值"""

    formations: List["FormationPool"] = betterproto.message_field(1)
    type: int = betterproto.int32_field(2)


@dataclass
class GetFightReport(betterproto.Message):
    """获取战报"""

    fight_id: int = betterproto.int64_field(1)


@dataclass
class GetFightReportRes(betterproto.Message):
    """获取战报返回"""

    atk_name: bytes = betterproto.bytes_field(1)
    atk_head: int = betterproto.int64_field(2)
    atk_level: int = betterproto.int32_field(3)
    def_name: bytes = betterproto.bytes_field(4)
    def_head: int = betterproto.int64_field(5)
    def_level: int = betterproto.int32_field(6)
    report: "FightReport" = betterproto.message_field(7)


@dataclass
class ShareReport(betterproto.Message):
    """战报分享"""

    fight_id: int = betterproto.int64_field(1)


@dataclass
class FightRecordItem(betterproto.Message):
    """单条挑战记录"""

    fight_id: int = betterproto.uint64_field(1)
    player_info: "CommonSimplePlayInfo" = betterproto.message_field(2)


@dataclass
class FightRecordBack(betterproto.Message):
    """挑战记录"""

    fight_records: List["FightRecordItem"] = betterproto.message_field(1)


@dataclass
class Friend(betterproto.Message):
    role_id: int = betterproto.int64_field(1)
    last_present_time: int = betterproto.int32_field(2)
    present_to_me: bool = betterproto.bool_field(3)


@dataclass
class ResFriendLogin(betterproto.Message):
    """好友系统登陆数据推送"""

    friend_list: List["Friend"] = betterproto.message_field(1)
    apply_list: List[int] = betterproto.int64_field(2)


@dataclass
class ResFriendReduce(betterproto.Message):
    """好友减少"""

    friend_role_id: int = betterproto.int64_field(1)


@dataclass
class ResAgreeApplies(betterproto.Message):
    """同意申请"""

    success_list: List[int] = betterproto.int64_field(1)
    err_list: List[int] = betterproto.int64_field(2)


@dataclass
class Fund(betterproto.Message):
    """成长基金档位"""

    level: int = betterproto.int32_field(1)
    state: int = betterproto.int32_field(2)
    unlock_time: int = betterproto.int32_field(4)
    receive_state: bytes = betterproto.bytes_field(5)


@dataclass
class ResFundLogin(betterproto.Message):
    """成长基金档位"""

    fund_list: List["Fund"] = betterproto.message_field(1)


@dataclass
class GuideProgress(betterproto.Message):
    """引导进度"""

    guide_id: int = betterproto.int32_field(1)
    step_id: int = betterproto.int32_field(2)


@dataclass
class ResGuideLogin(betterproto.Message):
    """商品信息"""

    saved_guide_id: int = betterproto.int32_field(1)
    saved_step_id: int = betterproto.int32_field(2)
    discrete_progress_list: List["GuideProgress"] = betterproto.message_field(3)


@dataclass
class GuildMember(betterproto.Message):
    """公会成员结构"""

    role_id: int = betterproto.int64_field(1)
    job: int = betterproto.int32_field(2)
    active: int = betterproto.uint32_field(3)


@dataclass
class Guild(betterproto.Message):
    """公会信息"""

    id: int = betterproto.int64_field(1)
    level: int = betterproto.int32_field(2)
    exp: int = betterproto.int32_field(3)
    badge: int = betterproto.int32_field(4)
    notice: str = betterproto.string_field(5)
    active: int = betterproto.int32_field(6)
    chat_channel: int = betterproto.int64_field(7)
    member_list: List["GuildMember"] = betterproto.message_field(8)
    audit_type: int = betterproto.int32_field(9)
    apply_list: List[int] = betterproto.int64_field(10)
    name: str = betterproto.string_field(11)
    server_id: int = betterproto.int32_field(12)
    level_limit: int = betterproto.int32_field(13)


@dataclass
class GuildSimpleInfo(betterproto.Message):
    """公会简略信息"""

    id: int = betterproto.int64_field(1)
    badge: int = betterproto.int32_field(2)
    level: int = betterproto.int32_field(3)
    member_count: int = betterproto.int32_field(4)
    active: int = betterproto.int32_field(5)
    name: str = betterproto.string_field(6)


@dataclass
class ReqCreateGuild(betterproto.Message):
    """请求创建公会"""

    name: str = betterproto.string_field(1)
    badge: int = betterproto.int32_field(2)
    notice: str = betterproto.string_field(3)


@dataclass
class ReqHandleJoinApply(betterproto.Message):
    """处理加入公会请求"""

    applies: List[int] = betterproto.int64_field(1)
    guild_id: int = betterproto.int64_field(2)
    agree: bool = betterproto.bool_field(3)


@dataclass
class ResCreateGuild(betterproto.Message):
    """创建公会回调"""

    guild: "Guild" = betterproto.message_field(1)
    res_change: "ResChange" = betterproto.message_field(2)


@dataclass
class ResRecommends(betterproto.Message):
    """公会推荐列表请求回调"""

    guild_infos: List["GuildSimpleInfo"] = betterproto.message_field(1)


@dataclass
class ResGuildMemberChange(betterproto.Message):
    """公会成员改变"""

    member_list: List["GuildMember"] = betterproto.message_field(1)


@dataclass
class ResGuildApplyListChange(betterproto.Message):
    """公会申请列表改变"""

    apply_list: List[int] = betterproto.int64_field(2)


@dataclass
class ResGuildJoinLimitChange(betterproto.Message):
    """公会加入条件改变"""

    audit_type: int = betterproto.int32_field(1)
    level_limit: int = betterproto.int32_field(2)


@dataclass
class GuildBossInfo(betterproto.Message):
    """公会BOSS信息"""

    daily_boss_info: "GuildBossInfoItem" = betterproto.message_field(1)


@dataclass
class GuildBossInfoItem(betterproto.Message):
    """公会BOSS信息项"""

    valid_time: int = betterproto.uint32_field(1)
    first_info: "GuildBossDamageInfo" = betterproto.message_field(2)
    last_first_info: "GuildBossDamageInfo" = betterproto.message_field(3)


@dataclass
class GuildBossDamageInfo(betterproto.Message):
    """公会BOSS伤害信息"""

    role_id: int = betterproto.uint64_field(1)
    damage: int = betterproto.uint32_field(2)
    time: int = betterproto.uint32_field(3)
    fight_id: int = betterproto.int64_field(4)


@dataclass
class GuildBossMemberInfo(betterproto.Message):
    """公会BOSS成员信息"""

    daily_info: "GuildBossMemberInfoItem" = betterproto.message_field(1)


@dataclass
class GuildBossMemberInfoItem(betterproto.Message):
    """公会BOSS成员信息项"""

    can_mop_up: bool = betterproto.bool_field(1)
    valid_time: int = betterproto.uint32_field(2)
    challenge_count: int = betterproto.uint32_field(3)
    max_damage: int = betterproto.uint32_field(4)
    last_damage: int = betterproto.uint32_field(6)
    last_time: int = betterproto.uint32_field(7)
    fight_id: int = betterproto.int64_field(8)


@dataclass
class ReqGuildBossBack(betterproto.Message):
    """公会BOSS挑战、扫荡返回信息"""

    res: "ResChange" = betterproto.message_field(1)
    new_member_info_item: "GuildBossMemberInfoItem" = betterproto.message_field(2)
    box_award_list: List["GuildBossBoxAward"] = betterproto.message_field(3)


@dataclass
class GuildBossBoxAward(betterproto.Message):
    """公会BOSS宝箱奖励"""

    box_award: List["GuildBossAwardItem"] = betterproto.message_field(1)


@dataclass
class GuildBossAwardItem(betterproto.Message):
    """公会BOSS奖励项"""

    tid: int = betterproto.int64_field(1)
    count: int = betterproto.int32_field(2)


@dataclass
class GuildBossMemberShowInfo(betterproto.Message):
    """公会BOSS成员展示信息"""

    member_show_info_list: List["GuildBossMemberShowItem"] = betterproto.message_field(
        1
    )


@dataclass
class GuildBossMemberShowItem(betterproto.Message):
    role_info: "CommonSimplePlayInfo" = betterproto.message_field(1)
    damage: int = betterproto.uint32_field(2)
    fight_id: int = betterproto.int64_field(3)


@dataclass
class Hero(betterproto.Message):
    """英雄信息(所有类型tid、state、count数量位置必须保持一致)"""

    tid: int = betterproto.int64_field(1)
    state: bool = betterproto.bool_field(2)
    count: int = betterproto.int32_field(3)
    uid: int = betterproto.int64_field(4)
    level: int = betterproto.int32_field(5)
    star: int = betterproto.int32_field(6)
    source: int = betterproto.int32_field(7)
    src_level: int = betterproto.int32_field(8)


@dataclass
class HeroInfo(betterproto.Message):
    """英雄信息"""

    hero_list: List["Hero"] = betterproto.message_field(1)
    is_auto_exile: bool = betterproto.bool_field(2)
    collect_hero_tid_list: List[int] = betterproto.int64_field(3)
    draw_count: int = betterproto.int32_field(4)
    baodi_count: int = betterproto.int32_field(5)
    baodi_camp_count: int = betterproto.int32_field(6)
    baodi_friend_count: int = betterproto.int32_field(7)
    diamond_draw_count: int = betterproto.int32_field(8)


@dataclass
class DrawHero(betterproto.Message):
    """抽卡请求"""

    draw_lib: int = betterproto.int32_field(1)
    draw_type: int = betterproto.int32_field(2)


@dataclass
class HeroDrawBack(betterproto.Message):
    """抽卡后返回前台数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_add_hero: List["Hero"] = betterproto.message_field(2)
    now_time: int = betterproto.int32_field(3)
    is_free: int = betterproto.int32_field(4)
    exile_hero_list: List["Hero"] = betterproto.message_field(5)
    daily_state: "RoleDailyState" = betterproto.message_field(6)


@dataclass
class HeroComposeReq(betterproto.Message):
    """合成请求"""

    hero_tid: int = betterproto.int64_field(1)
    hero_star: int = betterproto.int32_field(2)
    mat_hero_uid_list: List[int] = betterproto.int64_field(3)


@dataclass
class HeroDiscomposeReq(betterproto.Message):
    """分解请求"""

    mat_hero_uid_list: List[int] = betterproto.int64_field(3)


@dataclass
class HeroDiscomposeBack(betterproto.Message):
    """分解返回前台"""

    res: "ResChange" = betterproto.message_field(1)


@dataclass
class HeroRebirthBack(betterproto.Message):
    """英雄重生返回前台"""

    res: "ResChange" = betterproto.message_field(1)


@dataclass
class HeroUpStarReq(betterproto.Message):
    """升星请求"""

    hero_uid: int = betterproto.int64_field(1)
    mat_hero_uid_list: List[int] = betterproto.int64_field(2)


@dataclass
class HeroOneKeyUpStarReq(betterproto.Message):
    """一键升星请求"""

    hero_uid: List[int] = betterproto.int64_field(1)
    mat_hero_uid_list: List[int] = betterproto.int64_field(2)


@dataclass
class HeroUpStarBack(betterproto.Message):
    """升星返回前台数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_hero: "Hero" = betterproto.message_field(2)


@dataclass
class HeroUpLv(betterproto.Message):
    """升级"""

    hero_uid: int = betterproto.int64_field(1)
    up_lv_count: int = betterproto.int32_field(2)


@dataclass
class HeroUpLvBack(betterproto.Message):
    """升级返回前台数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_lv: int = betterproto.int32_field(2)


@dataclass
class HeroUpStage(betterproto.Message):
    """升阶"""

    hero_uid: int = betterproto.int64_field(1)


@dataclass
class HeroUpStageBack(betterproto.Message):
    """升阶后返回前台数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_stage: int = betterproto.int32_field(2)


@dataclass
class HeroChatData(betterproto.Message):
    """聊天分享数据"""

    type: int = betterproto.int32_field(1)
    hero_list: List["Hero"] = betterproto.message_field(2)


@dataclass
class Intelli(betterproto.Message):
    """情报数据"""

    tid: int = betterproto.uint32_field(1)
    uid: int = betterproto.int64_field(2)
    finish_time: int = betterproto.uint32_field(3)
    hero_uids: List[int] = betterproto.int64_field(4)
    award_list: List["IntelliAwardItem"] = betterproto.message_field(5)
    is_get_award: bool = betterproto.bool_field(6)
    hero_tids: List[int] = betterproto.int64_field(7)
    hero_stars: List[int] = betterproto.int32_field(8)


@dataclass
class IntelliAwardItem(betterproto.Message):
    """奖励信息"""

    tid: int = betterproto.uint32_field(1)
    num: int = betterproto.uint32_field(2)


@dataclass
class IntelliInfo(betterproto.Message):
    """情报总数据"""

    normal_flush_time: int = betterproto.uint32_field(1)
    intelli_list: List["Intelli"] = betterproto.message_field(3)
    record_list: List["IntelliRecord"] = betterproto.message_field(4)
    level: int = betterproto.uint32_field(5)


@dataclass
class IntelliRecord(betterproto.Message):
    """情报完成记录信息"""

    star: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass
class DispatchRequest(betterproto.Message):
    """派遣请求数据"""

    dispatch_uid: int = betterproto.int64_field(1)
    hero_uid_list: List[int] = betterproto.int64_field(2)


@dataclass
class GetIntelliAwardBack(betterproto.Message):
    """领取奖励后返回前台数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_intelli_list: List["Intelli"] = betterproto.message_field(2)
    remove_intelli_uid_list: List[int] = betterproto.int64_field(3)
    new_lv: int = betterproto.uint32_field(4)
    new_record_list: List["IntelliRecord"] = betterproto.message_field(5)


@dataclass
class FlushIntelliManualBack(betterproto.Message):
    """手动刷新情报"""

    res: "ResChange" = betterproto.message_field(1)
    new_intelli_list: List["Intelli"] = betterproto.message_field(2)


@dataclass
class FlushSpecialIntelliBack(betterproto.Message):
    """刷新特殊情报返回"""

    new_intelli_list: List["Intelli"] = betterproto.message_field(1)


@dataclass
class Item(betterproto.Message):
    """物品信息(所有类型物品tid、state、count数量位置必须保持一致)"""

    tid: int = betterproto.int64_field(1)
    state: bool = betterproto.bool_field(2)
    count: int = betterproto.int32_field(3)


@dataclass
class Box(betterproto.Message):
    """宝箱信息(所有类型物品tid、state、count数量位置必须保持一致)"""

    tid: int = betterproto.int64_field(1)
    state: bool = betterproto.bool_field(2)
    count: int = betterproto.int32_field(3)


@dataclass
class Equipment(betterproto.Message):
    """装备信息(所有类型物品tid、state、count数量位置必须保持一致)"""

    tid: int = betterproto.int64_field(1)
    state: bool = betterproto.bool_field(2)
    count: int = betterproto.int32_field(3)
    exp: int = betterproto.int32_field(4)
    star: int = betterproto.int32_field(5)


@dataclass
class PermitExp(betterproto.Message):
    """通行证经验信息"""

    tid: int = betterproto.int64_field(1)
    state: bool = betterproto.bool_field(2)
    count: int = betterproto.int32_field(3)


@dataclass
class ResChange(betterproto.Message):
    """玩家资源变化信息"""

    form: int = betterproto.int32_field(1)
    items: List["ResChangeItem"] = betterproto.message_field(2)


@dataclass
class ResChangeItem(betterproto.Message):
    """玩家资源变化每项信息"""

    type: int = betterproto.int32_field(1)
    value: bytes = betterproto.bytes_field(2)
    capacity: int = betterproto.int64_field(3)
    extra: bytes = betterproto.bytes_field(4)


@dataclass
class MorrowAwardInfo(betterproto.Message):
    """领取登录奖励返回数据"""

    award_state: int = betterproto.int32_field(2)
    is_morrow_login: bool = betterproto.bool_field(3)
    is_patch_mail: bool = betterproto.bool_field(4)


@dataclass
class RequestLoginAwardBack(betterproto.Message):
    """领取登录奖励返回数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_award_state: int = betterproto.int32_field(2)


@dataclass
class MorrowLoginAwardBack(betterproto.Message):
    """次日登录奖励返回数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_award_state: int = betterproto.int32_field(2)


@dataclass
class MailAward(betterproto.Message):
    """奖励信息"""

    id: int = betterproto.uint64_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass
class MailSimpleInfo(betterproto.Message):
    """邮件简要信息"""

    id: int = betterproto.uint64_field(1)
    is_read: bool = betterproto.bool_field(2)
    is_receive: bool = betterproto.bool_field(3)
    send_time: int = betterproto.uint32_field(4)


@dataclass
class MailTypeInfo(betterproto.Message):
    """邮件类型信息"""

    type: int = betterproto.uint32_field(1)
    mail_list: List["MailSimpleInfo"] = betterproto.message_field(2)


@dataclass
class MailPartInfo(betterproto.Message):
    """邮件主体信息"""

    id: int = betterproto.uint64_field(1)
    tid: int = betterproto.uint32_field(2)
    send_time: int = betterproto.uint32_field(3)
    send_name: bytes = betterproto.bytes_field(4)
    title: bytes = betterproto.bytes_field(5)
    content: bytes = betterproto.bytes_field(6)
    award: List["MailAward"] = betterproto.message_field(7)
    params: bytes = betterproto.bytes_field(8)


@dataclass
class MailDetailInfo(betterproto.Message):
    """邮件详细信息"""

    id: int = betterproto.uint64_field(1)
    tid: int = betterproto.uint32_field(2)
    is_read: bool = betterproto.bool_field(3)
    is_receive: bool = betterproto.bool_field(4)
    send_time: int = betterproto.uint32_field(5)
    send_name: bytes = betterproto.bytes_field(6)
    title: bytes = betterproto.bytes_field(7)
    content: bytes = betterproto.bytes_field(8)
    award: List["MailAward"] = betterproto.message_field(9)
    params: bytes = betterproto.bytes_field(10)


@dataclass
class MassMailInfo(betterproto.Message):
    """群发邮件信息"""

    id: int = betterproto.uint64_field(1)
    tid: int = betterproto.uint32_field(2)
    start_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)
    send_name: bytes = betterproto.bytes_field(5)
    title: bytes = betterproto.bytes_field(6)
    content: bytes = betterproto.bytes_field(7)
    award: List["MailAward"] = betterproto.message_field(8)
    server_list: List[int] = betterproto.uint32_field(9)
    min_level: int = betterproto.uint32_field(10)
    max_level: int = betterproto.uint32_field(11)
    min_ctime: int = betterproto.uint32_field(12)
    max_ctime: int = betterproto.uint32_field(13)
    black_list: List[int] = betterproto.uint32_field(14)
    mass_type: int = betterproto.uint32_field(15)
    role_id_list: List[int] = betterproto.uint32_field(16)
    send_time: int = betterproto.uint32_field(17)


@dataclass
class RevLoginMailInfo(betterproto.Message):
    """登录"""

    mail_list: List["MailDetailInfo"] = betterproto.message_field(1)


@dataclass
class RevNewMailInfo(betterproto.Message):
    """推送新邮件"""

    mail_list: List["MailDetailInfo"] = betterproto.message_field(1)
    del_list: List[int] = betterproto.uint64_field(2)


@dataclass
class RevOneKeyAwardMail(betterproto.Message):
    """一键领取"""

    res: "ResChange" = betterproto.message_field(1)
    rev_id_list: List[int] = betterproto.uint64_field(2)


@dataclass
class ToReadMail(betterproto.Message):
    """已读"""

    mailid: int = betterproto.uint64_field(1)


@dataclass
class ToAwardMail(betterproto.Message):
    """领取"""

    mailid: int = betterproto.uint64_field(1)


@dataclass
class RevAwardMail(betterproto.Message):
    """领取"""

    res: "ResChange" = betterproto.message_field(1)


@dataclass
class ToDelMail(betterproto.Message):
    """删除"""

    mailid: int = betterproto.uint64_field(1)


@dataclass
class MazeLimitProfession(betterproto.Message):
    """幻境神殿职业限定信息"""

    first_week: int = betterproto.uint32_field(1)
    limit_tid: int = betterproto.uint32_field(2)


@dataclass
class MazeBase(betterproto.Message):
    """幻境神殿基础信息"""

    open_time: int = betterproto.uint32_field(1)
    open_n: int = betterproto.uint32_field(2)
    difficulty_max: int = betterproto.uint32_field(3)
    mission_max: int = betterproto.uint32_field(4)


@dataclass
class MazeMapInfo(betterproto.Message):
    """地图信息"""

    difficulty: int = betterproto.uint32_field(1)
    layer: int = betterproto.uint32_field(2)
    maps: List["MazeMapMission"] = betterproto.message_field(3)
    events: List["MazeEvent"] = betterproto.message_field(4)
    appear_contract: bool = betterproto.bool_field(5)


@dataclass
class MazeMapMission(betterproto.Message):
    """地图关卡信息"""

    map_nodes: List["MazeMapNode"] = betterproto.message_field(1)


@dataclass
class MazeMapNode(betterproto.Message):
    """地图节点信息"""

    event_tid: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)
    next_idx_list: List[int] = betterproto.uint32_field(3)
    number: int = betterproto.uint32_field(4)


@dataclass
class MazeHeroInfo(betterproto.Message):
    """幻境神殿英雄信息"""

    heros: List["MazeHero"] = betterproto.message_field(1)
    hero_tid_list: List[int] = betterproto.int64_field(2)


@dataclass
class MazeHero(betterproto.Message):
    """幻境神殿英雄"""

    tid: int = betterproto.int64_field(1)
    uid: int = betterproto.int64_field(2)


@dataclass
class MazeAgreement(betterproto.Message):
    """幻境神殿契约信息"""

    target: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)


@dataclass
class MazeEvent(betterproto.Message):
    """幻境神殿事件信息"""

    number: int = betterproto.uint32_field(1)
    tid: int = betterproto.uint32_field(2)
    finish_tid: int = betterproto.uint32_field(3)
    data: bytes = betterproto.bytes_field(4)


@dataclass
class MazeEventQuestionData(betterproto.Message):
    """幻境神殿问号事件基础信息"""

    tid: int = betterproto.uint32_field(1)
    child_tid: List[int] = betterproto.uint32_field(2)
    data: bytes = betterproto.bytes_field(3)


@dataclass
class MazeEventQuestionLayer(betterproto.Message):
    """幻境神殿问号事件层信息"""

    layer_data: List["MazeEventQuestionData"] = betterproto.message_field(1)


@dataclass
class MazeEventQuestion(betterproto.Message):
    """幻境神殿问号事件信息"""

    event_data: List["MazeEventQuestionLayer"] = betterproto.message_field(1)


@dataclass
class MazeHeart(betterproto.Message):
    """幻境之心"""

    progress: int = betterproto.uint32_field(1)
    wish_list: List[int] = betterproto.uint32_field(2)
    task_tid: int = betterproto.uint32_field(3)
    task_prog: int = betterproto.uint32_field(4)


@dataclass
class MazeTalent(betterproto.Message):
    """幻境天赋"""

    talent_list: List[int] = betterproto.uint32_field(1)


@dataclass
class TriggerEvent(betterproto.Message):
    """触发事件"""

    number: int = betterproto.uint32_field(1)
    tid: int = betterproto.uint32_field(2)
    param: bytes = betterproto.bytes_field(3)


@dataclass
class MazeToClient(betterproto.Message):
    """通信返回前台的数据"""

    base: "MazeBase" = betterproto.message_field(1)
    map_info: "MazeMapInfo" = betterproto.message_field(2)
    hero_info: "MazeHeroInfo" = betterproto.message_field(3)
    agreements: List["MazeAgreement"] = betterproto.message_field(4)
    res: "ResChange" = betterproto.message_field(5)
    profession_limit_tid: int = betterproto.uint32_field(6)
    maze_heart_info: "MazeHeart" = betterproto.message_field(7)
    maze_power_info: "MazePowerToClient" = betterproto.message_field(8)


@dataclass
class MazeRaidsToClient(betterproto.Message):
    """扫荡通信返回前台的数据"""

    raids_data_list: List["MazeRaids"] = betterproto.message_field(1)
    res: "ResChange" = betterproto.message_field(2)


@dataclass
class MazeRaids(betterproto.Message):
    """扫荡数据"""

    maps: List["MazeMapMission"] = betterproto.message_field(1)
    way: List[int] = betterproto.uint32_field(2)


@dataclass
class MazePowerToClient(betterproto.Message):
    """幻境之力前台数据"""

    talent_point: int = betterproto.uint32_field(1)
    talent_list: "MazeTalent" = betterproto.message_field(2)


@dataclass
class MissionPassInfo(betterproto.Message):
    """关卡通关记录信息"""

    role_id: int = betterproto.uint64_field(1)
    server_id: int = betterproto.uint32_field(2)
    power: int = betterproto.uint32_field(3)
    level: int = betterproto.uint32_field(4)
    fight_id: int = betterproto.uint64_field(5)


@dataclass
class MissionChapterTask(betterproto.Message):
    """章节任务信息记录"""

    chapter: int = betterproto.uint32_field(1)
    side_tasks: List["MissionSideTask"] = betterproto.message_field(2)
    receive_state: int = betterproto.uint32_field(3)


@dataclass
class MissionSideTask(betterproto.Message):
    """支线任务结构"""

    task_id: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)
    progress: int = betterproto.uint32_field(3)


@dataclass
class MissionToClient(betterproto.Message):
    """通信后台返回前台的关卡数据"""

    past_chapter_tid: int = betterproto.uint32_field(1)
    past_section_idx: int = betterproto.uint32_field(2)
    recover_build_tid_list: List[int] = betterproto.uint32_field(3)
    res: "ResChange" = betterproto.message_field(4)
    fight_result: int = betterproto.int64_field(5)


@dataclass
class MissionRecordToClient(betterproto.Message):
    """通信返给前台的关卡记录信息"""

    infos: List["MissionRecordInfo"] = betterproto.message_field(1)


@dataclass
class MissionRecordInfo(betterproto.Message):
    """通关记录信息"""

    info: "MissionPassInfo" = betterproto.message_field(1)
    name: bytes = betterproto.bytes_field(2)
    alliance_info: bytes = betterproto.bytes_field(3)
    icon_tid: int = betterproto.int32_field(5)


@dataclass
class MchapterTaskToClient(betterproto.Message):
    """通信返回前台的章节任务信息"""

    chapter_tasks: List["MissionChapterTask"] = betterproto.message_field(1)
    res: "ResChange" = betterproto.message_field(2)


@dataclass
class NoviceGiftReward(betterproto.Message):
    """新手礼包奖励结构"""

    id: int = betterproto.int32_field(1)
    buy_times: int = betterproto.int32_field(2)


@dataclass
class NoviceGift(betterproto.Message):
    """新手礼包结构"""

    unlock_time: int = betterproto.int32_field(1)
    reward_list: List["NoviceGiftReward"] = betterproto.message_field(2)


@dataclass
class PeakTowerRecord(betterproto.Message):
    """天极之塔记录数据"""

    role_id: int = betterproto.uint64_field(1)
    fight_id: int = betterproto.uint64_field(2)


@dataclass
class PeakTowerChallenge(betterproto.Message):
    """天极之塔挑战后返回数据"""

    new_tower_tid: int = betterproto.uint32_field(1)
    res: "ResChange" = betterproto.message_field(2)


@dataclass
class PeakTowerSweepBack(betterproto.Message):
    """天极之塔挑战后返回数据"""

    new_data: "PeakTowerChallenge" = betterproto.message_field(1)
    new_formation: "FormationChangeRev" = betterproto.message_field(2)


@dataclass
class PeakTowerRecordShowItem(betterproto.Message):
    fight_id: int = betterproto.uint64_field(1)
    player_info: "CommonSimplePlayInfo" = betterproto.message_field(2)


@dataclass
class PeakTowerRecordBack(betterproto.Message):
    """天极之塔记录"""

    record_list: List["PeakTowerRecordShowItem"] = betterproto.message_field(1)


@dataclass
class PeakTowerAchievementBack(betterproto.Message):
    """天极之塔领取成就奖励返回数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_award_state: bytes = betterproto.bytes_field(2)


@dataclass
class PermitInfo(betterproto.Message):
    """通行证数据"""

    id: int = betterproto.uint64_field(1)
    open_day: int = betterproto.uint64_field(2)
    is_pay: bool = betterproto.bool_field(3)


@dataclass
class PermitAward(betterproto.Message):
    """通行证奖励数据"""

    id: int = betterproto.uint64_field(1)
    levels: List["PermitLevel"] = betterproto.message_field(2)


@dataclass
class PermitLevel(betterproto.Message):
    """通行证等级数据"""

    level: int = betterproto.uint32_field(1)
    receive_free: bool = betterproto.bool_field(2)
    receive_permit: bool = betterproto.bool_field(3)


@dataclass
class PermitToClient(betterproto.Message):
    """通行证返回前台数据"""

    infos: List["PermitInfo"] = betterproto.message_field(1)
    awards: List["PermitAward"] = betterproto.message_field(2)
    res: "ResChange" = betterproto.message_field(3)


@dataclass
class PreachInfo(betterproto.Message):
    """传道信息"""

    share_level: int = betterproto.int32_field(1)
    max_level: int = betterproto.int32_field(2)
    grid_list: List["PreachGrid"] = betterproto.message_field(3)
    up_lv_progress: int = betterproto.int32_field(4)


@dataclass
class PreachGrid(betterproto.Message):
    """容器格子"""

    index: int = betterproto.int32_field(1)
    hero_uid: int = betterproto.int64_field(2)
    frozen_time: int = betterproto.int32_field(3)


@dataclass
class OpenGridBack(betterproto.Message):
    """开启格子返回前台"""

    res: "ResChange" = betterproto.message_field(1)


@dataclass
class UnFreezeGridBack(betterproto.Message):
    """解冻格子返回前台"""

    res: "ResChange" = betterproto.message_field(1)


@dataclass
class PreachUpLvBack(betterproto.Message):
    """圣殿升级返回前台"""

    res: "ResChange" = betterproto.message_field(1)
    share_lv: int = betterproto.int32_field(2)
    progress: int = betterproto.int32_field(3)


@dataclass
class PrivilegeCard(betterproto.Message):
    """单个月卡数据"""

    id: int = betterproto.int32_field(1)
    recharge_amount: int = betterproto.int32_field(2)
    active: bool = betterproto.bool_field(3)
    invalid_day: int = betterproto.int32_field(4)
    last_get_reward_day: int = betterproto.int32_field(5)


@dataclass
class ResPrivilegeCardLogin(betterproto.Message):
    """月卡登陆数据"""

    cards: List["PrivilegeCard"] = betterproto.message_field(1)


@dataclass
class ResGetPrivilegeCardReward(betterproto.Message):
    """领取月卡奖励回调"""

    card: "PrivilegeCard" = betterproto.message_field(1)
    res_change: "ResChange" = betterproto.message_field(2)


@dataclass
class FirstRechargeRewardState(betterproto.Message):
    """首充奖励状态结构"""

    has_get: bool = betterproto.bool_field(1)
    enable_time: int = betterproto.int32_field(2)


@dataclass
class RechargeRecord(betterproto.Message):
    """充值记录结构"""

    time: int = betterproto.int32_field(1)
    recharge_id: int = betterproto.int32_field(2)


@dataclass
class FirstRechargeLevel(betterproto.Message):
    """首充档位"""

    level: int = betterproto.int32_field(1)
    active: bool = betterproto.bool_field(2)
    reward_states: List["FirstRechargeRewardState"] = betterproto.message_field(3)


@dataclass
class RechargeOrderInfo(betterproto.Message):
    """充值单号信息"""

    order_no: bytes = betterproto.bytes_field(1)
    amount: int = betterproto.int32_field(2)
    product_id: int = betterproto.int64_field(3)


@dataclass
class ResRechargeSuccess(betterproto.Message):
    """充值成功消息"""

    max_record: "RechargeRecord" = betterproto.message_field(1)
    record: "RechargeRecord" = betterproto.message_field(2)
    res_change: "ResChange" = betterproto.message_field(3)
    total_amount: int = betterproto.int32_field(4)
    order: str = betterproto.string_field(5)


@dataclass
class ResRechargeLogin(betterproto.Message):
    """登陆消息"""

    max_record: "RechargeRecord" = betterproto.message_field(1)
    total_amount: int = betterproto.int32_field(2)
    first_recharge_infos: List["FirstRechargeLevel"] = betterproto.message_field(3)
    first_recharge_open_day: int = betterproto.int32_field(4)
    diamond_first_state: bytes = betterproto.bytes_field(5)


@dataclass
class RegularGiftBuyRecord(betterproto.Message):
    """日月周礼包购买记录"""

    gift_id: int = betterproto.int32_field(1)
    buy_times: int = betterproto.int32_field(2)


@dataclass
class RegularGift(betterproto.Message):
    """日月周礼包结构"""

    gift_type: int = betterproto.int32_field(1)
    last_refresh_time: int = betterproto.int32_field(2)
    buy_records: List["RegularGiftBuyRecord"] = betterproto.message_field(3)


@dataclass
class ResRegularGiftLogin(betterproto.Message):
    """日月周礼包购买记录"""

    gift_list: List["RegularGift"] = betterproto.message_field(1)


@dataclass
class ResRevFreeRegularGift(betterproto.Message):
    """领取免费礼包回调"""

    res_change: "ResChange" = betterproto.message_field(1)


@dataclass
class RoleDailyState(betterproto.Message):
    """主角每日状态表"""

    flush_time: int = betterproto.uint32_field(1)
    state: bytes = betterproto.bytes_field(2)


@dataclass
class RoleLoginDayCount(betterproto.Message):
    """玩家登录天数信息表"""

    last_login_time: int = betterproto.uint32_field(1)
    login_day_count: int = betterproto.uint32_field(2)


@dataclass
class CommonSimplePlayInfo(betterproto.Message):
    """通用玩家简单信息"""

    id: int = betterproto.sint64_field(1)
    alliance_info: bytes = betterproto.bytes_field(2)
    server_id: int = betterproto.int32_field(3)
    name: bytes = betterproto.bytes_field(4)
    level: int = betterproto.int32_field(5)
    icon_tid: int = betterproto.int32_field(6)
    value: int = betterproto.int32_field(7)
    power: int = betterproto.int32_field(8)
    is_robot: bool = betterproto.bool_field(9)


@dataclass
class CommonPlayInfo(betterproto.Message):
    """通用玩家信息"""

    id: int = betterproto.sint64_field(1)
    alliance_info: bytes = betterproto.bytes_field(2)
    server_id: int = betterproto.int32_field(3)
    name: bytes = betterproto.bytes_field(4)
    level: int = betterproto.int32_field(5)
    icon_tid: int = betterproto.int32_field(6)
    mission_progress: int = betterproto.int32_field(7)
    value: int = betterproto.int32_field(8)
    is_robot: bool = betterproto.bool_field(9)
    guild_name: str = betterproto.string_field(10)
    tower_id: int = betterproto.int32_field(11)
    formations: List["Formation"] = betterproto.message_field(12)
    hero_list: List["Hero"] = betterproto.message_field(13)
    vip: int = betterproto.int32_field(14)
    warcraft_list: List["WarcraftInfo"] = betterproto.message_field(15)


@dataclass
class ToClientRoleInfo(betterproto.Message):
    """后台传递前台角色数据"""

    nick_name: bytes = betterproto.bytes_field(1)
    set_name_times: int = betterproto.uint32_field(2)
    figure_tid: int = betterproto.uint32_field(3)
    level: int = betterproto.uint32_field(4)
    exp: int = betterproto.uint32_field(5)
    create_time: int = betterproto.uint32_field(6)
    daily_states: "RoleDailyState" = betterproto.message_field(7)
    role_login_day_count: "RoleLoginDayCount" = betterproto.message_field(8)
    sundry_data: List["SundryInfo"] = betterproto.message_field(9)
    level_reward_record: int = betterproto.uint32_field(10)


@dataclass
class ResSetRoleName(betterproto.Message):
    """设置角色名称回调"""

    nick_name: bytes = betterproto.bytes_field(1)
    set_name_times: int = betterproto.uint32_field(2)
    res_change: "ResChange" = betterproto.message_field(3)


@dataclass
class ResGetLevelReward(betterproto.Message):
    """领取升级奖励回调"""

    res_change: "ResChange" = betterproto.message_field(1)


@dataclass
class SundryInfo(betterproto.Message):
    """本地数据存储结构"""

    key: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)
    type: int = betterproto.uint32_field(3)


@dataclass
class SevenDayInfo(betterproto.Message):
    """七日目标信息"""

    progress: int = betterproto.uint32_field(1)
    progress_award_state: int = betterproto.uint32_field(2)
    adventure_award_state: bytes = betterproto.bytes_field(3)
    reward_award_state: bytes = betterproto.bytes_field(4)
    trial_award_state: bytes = betterproto.bytes_field(5)
    tower_award_state: bytes = betterproto.bytes_field(6)
    is_patch_mail: bool = betterproto.bool_field(7)


@dataclass
class SevenDayMissionAwardBack(betterproto.Message):
    """七日目标领取任务奖励返回数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_award_state: bytes = betterproto.bytes_field(2)
    new_progress: int = betterproto.uint32_field(3)


@dataclass
class SevenDayProgressAwardBack(betterproto.Message):
    """七日目标领取进度奖励返回数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_award_state: int = betterproto.uint32_field(2)


@dataclass
class ShopItemInfo(betterproto.Message):
    """商品信息"""

    tid: int = betterproto.int32_field(1)
    buy_count: int = betterproto.int32_field(2)


@dataclass
class ShopInfo(betterproto.Message):
    """商店信息"""

    shop_type: int = betterproto.int32_field(1)
    refresh_time: int = betterproto.int32_field(2)
    today_refresh_count: int = betterproto.int32_field(3)
    item_list: List["ShopItemInfo"] = betterproto.message_field(4)
    last_manual_refresh_time: int = betterproto.int32_field(5)


@dataclass
class ResShopLogin(betterproto.Message):
    """登录数据推送"""

    shop_info_list: List["ShopInfo"] = betterproto.message_field(1)


@dataclass
class ResBuyShopItem(betterproto.Message):
    """商品购买回调"""

    item_idx: int = betterproto.int32_field(1)
    shop_type: int = betterproto.int32_field(2)
    shop_item: "ShopItemInfo" = betterproto.message_field(3)
    res_change: "ResChange" = betterproto.message_field(4)


@dataclass
class ResRefreshShop(betterproto.Message):
    """商店刷新回调"""

    shop: "ShopInfo" = betterproto.message_field(1)
    res_change: "ResChange" = betterproto.message_field(2)


@dataclass
class ReqBuyShopItem(betterproto.Message):
    """请求购买商品"""

    shop_type: int = betterproto.int32_field(1)
    item_idx: int = betterproto.int32_field(2)
    shop_item_id: int = betterproto.int32_field(3)
    count: int = betterproto.int32_field(4)


@dataclass
class SignInInfo(betterproto.Message):
    """签到信息"""

    round: int = betterproto.uint32_field(1)
    round_start_day: int = betterproto.uint32_field(2)
    login_day: int = betterproto.uint32_field(3)
    award_state: bytes = betterproto.bytes_field(4)
    advanced_award_state: bytes = betterproto.bytes_field(5)
    is_advanced: bool = betterproto.bool_field(6)
    privilege_end_day: int = betterproto.uint32_field(7)


@dataclass
class RequestSignInAwardBack(betterproto.Message):
    """领取签到奖励返回数据"""

    res: "ResChange" = betterproto.message_field(1)
    new_info: "SignInInfo" = betterproto.message_field(2)


@dataclass
class StoryData(betterproto.Message):
    """剧情数据"""

    tid: int = betterproto.uint32_field(1)
    finish_story_list: List[int] = betterproto.uint32_field(2)


@dataclass
class EveryTaskSingle(betterproto.Message):
    """日常、周常单个任务数据"""

    tid: int = betterproto.uint64_field(1)
    finished_count: int = betterproto.uint32_field(2)
    award_state: int = betterproto.uint32_field(3)


@dataclass
class EveryTask(betterproto.Message):
    """日常、周常任务数据"""

    task_list: List["EveryTaskSingle"] = betterproto.message_field(1)
    vitality: int = betterproto.uint32_field(2)
    vitality_tid: int = betterproto.uint32_field(3)
    vitality_stage: bytes = betterproto.bytes_field(4)
    refresh_time: int = betterproto.uint64_field(5)


@dataclass
class MainTaskSingle(betterproto.Message):
    """主线任务数据"""

    tid: int = betterproto.uint64_field(1)
    group_id: int = betterproto.uint64_field(2)
    finished_count: int = betterproto.uint32_field(3)


@dataclass
class MainTask(betterproto.Message):
    """主线任务数据"""

    task_list: List["MainTaskSingle"] = betterproto.message_field(1)


@dataclass
class EveryReceiveVitalityBack(betterproto.Message):
    """日常、周常活跃度奖励"""

    new_vitality_stage: bytes = betterproto.bytes_field(1)
    res_change: "ResChange" = betterproto.message_field(2)


@dataclass
class MainReceiveAwardBack(betterproto.Message):
    """主线领取奖励返回数据"""

    main_task: "MainTask" = betterproto.message_field(1)
    res_change: "ResChange" = betterproto.message_field(2)


@dataclass
class TaskDataBack(betterproto.Message):
    """日常、周常、主线数据返回"""

    daily_task_data: "EveryTask" = betterproto.message_field(1)
    weekly_task_data: "EveryTask" = betterproto.message_field(2)
    main_task_data: "MainTask" = betterproto.message_field(3)


@dataclass
class TrialParadiseData(betterproto.Message):
    """神国试炼数据"""

    guard_list: List["TrialParadiseGuard"] = betterproto.message_field(1)


@dataclass
class TrialParadiseHero(betterproto.Message):
    """英雄简易信息"""

    tid: int = betterproto.int64_field(1)
    level: int = betterproto.int32_field(2)
    star: int = betterproto.int32_field(3)
    uid: int = betterproto.int64_field(4)
    loc: int = betterproto.int32_field(5)


@dataclass
class TrialParadiseGuard(betterproto.Message):
    """神国试炼关卡数据"""

    index: int = betterproto.int32_field(1)
    role_id: int = betterproto.int64_field(2)
    role_name: bytes = betterproto.bytes_field(3)
    head_tid: int = betterproto.int32_field(4)
    level: int = betterproto.int32_field(5)
    hero_list: List["TrialParadiseHero"] = betterproto.message_field(6)
    fight_tid: int = betterproto.int64_field(7)
    finish: bool = betterproto.bool_field(8)
    box_award: bool = betterproto.bool_field(9)
    power: int = betterproto.int32_field(10)
    warcraft_tid: int = betterproto.int32_field(11)
    warcraft_star: int = betterproto.int32_field(12)
    warcraft_level: int = betterproto.int32_field(13)


@dataclass
class TrialParadiseRole(betterproto.Message):
    """对手详情"""

    index: int = betterproto.int32_field(1)
    role_id: int = betterproto.int64_field(2)
    fighter_list: List["FighterInfo"] = betterproto.message_field(3)
    warcraft_tid: int = betterproto.int32_field(4)
    warcraft_star: int = betterproto.int32_field(5)
    warcraft_level: int = betterproto.int32_field(6)


@dataclass
class TrialLogin(betterproto.Message):
    """登录数据"""

    data: "TrialParadiseData" = betterproto.message_field(1)
    update_time: int = betterproto.int32_field(2)
    recover_count: int = betterproto.int32_field(3)


@dataclass
class TrialParadiseDataRev(betterproto.Message):
    """获取神国试炼数据"""

    data: "TrialParadiseData" = betterproto.message_field(1)
    update_time: int = betterproto.int32_field(2)
    recover_count: int = betterproto.int32_field(3)
    reset: bool = betterproto.bool_field(4)


@dataclass
class TrialParadiseEnemyData(betterproto.Message):
    """获取对手详情"""

    index: int = betterproto.int32_field(1)


@dataclass
class TrialParadiseFight(betterproto.Message):
    """发起挑战"""

    index: int = betterproto.int32_field(1)
    fight_id: int = betterproto.int64_field(2)


@dataclass
class TrialParadiseFightRev(betterproto.Message):
    """发起挑战返回值"""

    res_change: "ResChange" = betterproto.message_field(1)


@dataclass
class TrialParadiseBoxAward(betterproto.Message):
    """领取宝箱奖励"""

    index: int = betterproto.int32_field(1)


@dataclass
class TrialParadiseBoxAwardRev(betterproto.Message):
    """领取宝箱奖励返回"""

    res_change: "ResChange" = betterproto.message_field(1)


@dataclass
class TrialParadiseRecoverRev(betterproto.Message):
    """复活英雄返回"""

    recover_count: int = betterproto.int32_field(1)
    res_change: "ResChange" = betterproto.message_field(2)


@dataclass
class TriggerGiftReward(betterproto.Message):
    """触发礼包奖励数据"""

    recharge_id: int = betterproto.int32_field(1)
    buy_times: int = betterproto.int32_field(2)


@dataclass
class TriggerGift(betterproto.Message):
    """触发礼包数据"""

    id: int = betterproto.int32_field(1)
    invalid_time: int = betterproto.int32_field(2)
    rewards: List["TriggerGiftReward"] = betterproto.message_field(3)


@dataclass
class ResTriggerGiftLogin(betterproto.Message):
    """触发礼包登陆数据"""

    triggered_ids: List[int] = betterproto.int32_field(1)
    trigger_gifts: List["TriggerGift"] = betterproto.message_field(2)


@dataclass
class ResGetTriggerGiftReward(betterproto.Message):
    """领取触发礼包奖励回调"""

    gift: "TriggerGift" = betterproto.message_field(1)
    res_change: "ResChange" = betterproto.message_field(2)


@dataclass
class ResVipLogin(betterproto.Message):
    """vip登陆"""

    vip_level: int = betterproto.int32_field(1)
    vip_exp: int = betterproto.int32_field(2)
    reward_state: bytes = betterproto.bytes_field(3)


@dataclass
class ResGetVipReward(betterproto.Message):
    """vip奖励领取回调"""

    reward_state: bytes = betterproto.bytes_field(1)
    res_change: "ResChange" = betterproto.message_field(2)


@dataclass
class WarcraftInfo(betterproto.Message):
    """魔兽信息"""

    tid: int = betterproto.uint32_field(1)
    star: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)


@dataclass
class WarcraftDungeonInfo(betterproto.Message):
    """魔兽副本信息"""

    tid: int = betterproto.uint32_field(1)
    day: int = betterproto.uint32_field(2)
    attack_n: int = betterproto.sint32_field(3)
    buy_n: int = betterproto.uint32_field(4)
    degree_infos: List["DungeonDegreeInfo"] = betterproto.message_field(5)


@dataclass
class DungeonDegreeInfo(betterproto.Message):
    """魔兽副本难度信息"""

    degree: int = betterproto.uint32_field(1)
    progress: int = betterproto.uint32_field(2)


@dataclass
class WarcraftBack(betterproto.Message):
    """魔兽养成通信数据"""

    warcrafts: List["WarcraftInfo"] = betterproto.message_field(1)
    dungeons: List["WarcraftDungeonInfo"] = betterproto.message_field(2)
    res: "ResChange" = betterproto.message_field(3)
