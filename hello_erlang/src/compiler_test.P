-file("compiler_test.erl", 1).

-module(compiler_test).

-copyright({jzyx, 'www.jzyx.com'}).

-author({fred, 'wangxingfred@gmail.com'}).

-vsn(1).

-import(lists, [reverse/1]).

-export([a/0,b/0]).

-export([if_/3,case_/3,empty_branch/4]).

-export([macro_ignore/2]).

-export([reserve_list/1]).

-export([maybe_expression/2,maybe2/2,maybe2_identical/2]).

a() ->
    receive
        _ ->
            ok
    after
        5000 -> {error, timeout}
    end.

b() ->
    erlang:send_after(5000, self(), timeout).

if_(Term, Nil, Default) ->
    if
        Term =:= Nil ->
            Default;
        true ->
            Term
    end.

case_(Term, Nil, Default) ->
    case Term of
        Nil ->
            Default;
        _ ->
            Term
    end.

empty_branch(Term, Case1, Case2, Default) ->
    case Term of
        Case1 ->
            throw(case1);
        Case2 ->
            empty;
        _ ->
            throw(Default)
    end,
    ok.

macro_ignore(A, B) ->
    List = [{"A", A}, {"B", B}],
    ignore,
    A + B.

reserve_list(List) ->
    reverse(List),
    reserve_list1(List, []),
    reserve_list2(List, []).

reserve_list1([H | T], RL) ->
    reserve_list1(T, [H | RL]);
reserve_list1([], RL) ->
    RL.

reserve_list2([], RL) ->
    RL;
reserve_list2([H | T], RL) ->
    reserve_list2(T, [H | RL]).

maybe_expression(Term, Default) ->
    maybe
        default ?= if_(Term, nil, default),
        default ?= case_(Term, nil, default),
        Default
    else
        {error, _Y} ->
            {ok, "default"};
        {ok, _Term} ->
            {error, "unexpected wrapper"};
        Else ->
            {"else", Else}
    end.

add_(A, B) when is_number(A), is_number(B) ->
    {ok, A + B};
add_(_A, _B) ->
    error.

sub_(A, B) when A >= B ->
    {ok, A - B};
sub_(_A, _B) ->
    wrong.

maybe2(A, B) ->
    maybe
        {ok, Sum} ?= add_(A, B),
        true = Sum >= 0,
        {ok, Sub} ?= sub_(A, B),
        {Sum, Sub}
    else
        error ->
            error;
        wrong ->
            error
    end.

maybe2_identical(A, B) ->
    case add_(A, B) of
        {ok, Sum} ->
            true = Sum >= 0,
            case sub_(A, B) of
                {ok, Sub} ->
                    {Sum, Sub};
                wrong ->
                    wrong
            end;
        error ->
            error
    end.



